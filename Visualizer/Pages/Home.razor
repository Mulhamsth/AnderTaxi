@page "/"
@using System.Net
@using CloudNative.CloudEvents
@using Model
@inject RabbitMqManager RmqManager
@inject HttpClient httpClient
@using System.Timers
@implements IDisposable


<div class="grid">
    @for (int y = 0; y < Y; y++)
    {
        <div class="row">
            @for (int x = 0; x < X; x++)
            {
                <div class="cell">@GetCellContent(x, y)</div>
            }
        </div>
    }
</div>

<button @onclick="CreateTaxi">Create Taxi</button>
<button @onclick="GetPassenger">Get Passenger</button>


@code {
    private static int X { get; set; } = 30;
    private static int Y { get; set; } = 30;
    private char[,] grid = new char[Y, X];
    
    private Timer _timer;
    protected override async Task OnInitializedAsync()
    {
        await RmqManager.ConsumeCloudEventMessage("visualizer", HandleCloudEventMessage);
        _timer = new Timer(2000); // 2 seconds
        _timer.Elapsed += OnTimerElapsed;
        _timer.AutoReset = true;
        _timer.Enabled = true;
    }

    private async Task HandleCloudEventMessage(CloudEvent cloudEvent)
    {

        if (cloudEvent.Type == "taxi.location")
        {
            var driverRequest = await RmqManager.DeserializeCloudEventMessage<TaxiDto>(cloudEvent);
            Console.WriteLine($"Taxi location: {driverRequest.Location.X}, {driverRequest.Location.Y}");
            await UpdateGrid(driverRequest.Location, 'd');
        }
        else if (cloudEvent.Type == "passenger.location")
        {
            var passengerRequest = await RmqManager.DeserializeCloudEventMessage<PassengerRequest>(cloudEvent);
            await UpdateGrid(passengerRequest.Location, 'p');
        }
        else
        {
            Console.WriteLine("[x] Received Unknown Message" + cloudEvent.Type);
        }
    }

    private async Task UpdateGrid(Location location, char symbol)
    {
        grid[location.Y, location.X] = symbol;
    }

    private char GetCellContent(int x, int y)
    {
        return grid[y, x];
    }
    
    private async Task CreateTaxi()
    {
        var response = await httpClient.PostAsync("http://driverservice:8080/taxi", null);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Taxi created successfully.");
        }
        else
        {
            Console.WriteLine("Failed to create taxi.");
        }
    }

    private async Task GetPassenger()
    {
        var response = await httpClient.GetAsync("http://passengerservice:8080/");
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Passenger retrieved successfully.");
        }
        else
        {
            Console.WriteLine("Failed to retrieve passenger.");
        }
    }

    private void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
         InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _timer?.Dispose();
        httpClient?.Dispose();
    }

}